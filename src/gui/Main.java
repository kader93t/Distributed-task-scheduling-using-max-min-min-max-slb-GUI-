/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import ordonnacement.Scheduler;
import ordonnacement.Slb;
import ordonnacement.Xmin;
/**
 *
 * @author Drmz
 */
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    DefaultTableModel jTableModel;
    TableColumnModel columnModel;
    TableColumn tcolumn;
    JTableHeader jtableheader;
    HashMap<String, Integer> maxMachines, minMachines, slbMachines;
    public Slb slbObj;

    public Main() {
        luncheApp();
        this.setLocationRelativeTo(null);
        //setVisible(true);
        //jTableData.setAutoCreateColumnsFromModel(false);
        maxMachines = minMachines = slbMachines = null;
    }

    public void luncheApp() {
        initComponents();
        this.setMinimumSize(new Dimension(700, 500));
        this.setLocationRelativeTo(null);

        jtableheader = jTableData.getTableHeader();
        jTableModel = (DefaultTableModel) jTableData.getModel();
        jtableheader.setOpaque(false);
        jtableheader.setBackground(Color.DARK_GRAY);

        jtableheader.setForeground(Color.yellow);
        jTableData.setGridColor(Color.darkGray);

        columnModel = jTableData.getColumnModel();

        columnModel.getColumn(0).setCellRenderer(new ColumnColorRenderer(Color.DARK_GRAY, Color.GREEN));
        for (int i = 1; i < columnModel.getColumnCount(); i++) {

            tcolumn = columnModel.getColumn(i);
            tcolumn.setCellRenderer(new ColumnColorRenderer(Color.lightGray, Color.black));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jNombreDeMachine = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jNombreDeTaches = new javax.swing.JSpinner();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        isSLBSelected = new javax.swing.JCheckBox();
        isMinMinSelected = new javax.swing.JCheckBox();
        isMaxMinSelected = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTableData.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"M1", null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"M2", null, null, null, null, null, null, null, null, null, null, null, null, null},
                {"M3", "", null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10", "T11", "T12", "T13"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableData);
        if (jTableData.getColumnModel().getColumnCount() > 0) {
            jTableData.getColumnModel().getColumn(0).setResizable(false);
            jTableData.getColumnModel().getColumn(12).setResizable(false);
        }

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Lien du fichier");

        jPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPathActionPerformed(evt);
            }
        });

        jButton2.setText("Explorer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("      Nombre de machines");

        jLabel3.setText("   Nombre de taches");

        jButton4.setText("Cree le tableau");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addComponent(jPath, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jNombreDeTaches, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jNombreDeMachine, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jNombreDeMachine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jNombreDeTaches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Commancer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (NullPointerException e){
                    JOptionPane.showMessageDialog(null, "Le tableau est vide ");
                }

                }
        });

        isSLBSelected.setBackground(new java.awt.Color(255, 255, 255));
        isSLBSelected.setText("SLB ");

        isMinMinSelected.setBackground(new java.awt.Color(255, 255, 255));
        isMinMinSelected.setText("MinMin");

        isMaxMinSelected.setBackground(new java.awt.Color(255, 255, 255));
        isMaxMinSelected.setText("MaxMin");

        jButton3.setText("Retour");
//        jButton3.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton3ActionPerformed(evt);
//            }
//        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(isMinMinSelected)
                .addGap(34, 34, 34)
                .addComponent(isMaxMinSelected)
                .addGap(45, 45, 45)
                .addComponent(isSLBSelected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 309, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(99, 99, 99))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isMinMinSelected)
                    .addComponent(jButton1)
                    .addComponent(isMaxMinSelected)
                    .addComponent(isSLBSelected)
                    .addComponent(jButton3))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, java.awt.BorderLayout.LINE_END);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel5, java.awt.BorderLayout.LINE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    boolean useOld = false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean check = false;

        Scheduler scheduler = new Scheduler();
        scheduler.schuduler = new HashMap<>();
        jTableModel = (DefaultTableModel) jTableData.getModel();
        int nombreDeTaches = jTableModel.getColumnCount();
        // System.out.println( "=======================> "+ nombreDeTaches);
        int nombreDeMachine = jTableModel.getRowCount();
        //System.out.println("nombre De machine " + nombreDeMachine);
        ArrayList<HashMap<String, Integer>> tableau = new ArrayList<>();

        //Get the tasks time execution for every machine
        for (int i = 0; i < nombreDeMachine; i++) {
            tableau.add(i, new HashMap<>());
            for (int j = 1; j < nombreDeTaches; j++) {
                tableau.get(i).put("t" + j, Integer.parseInt(jTableData.getValueAt(i, j).toString()));

            }

            scheduler.schuduler.put(jTableData.getValueAt(i, 0).toString(), tableau.get(i));
            scheduler.machines.put(jTableData.getValueAt(i, 0).toString(), 0);

        }
        //System.out.println(scheduler.schuduler.size());
        Resultat rsl = new Resultat(this);

        if (isMaxMinSelected.isSelected()) {
            if (useOld && maxMachines != null) {
                for (String machine : maxMachines.keySet()) {
                    Scheduler.machines.put(machine, maxMachines.get(machine));
                }

                //Scheduler.machines = maxMachines;
            }
            check = true;
            new Xmin().xMin("max");
            rsl.drawMaxMin(nombreDeTaches, Scheduler.FileMachine, Scheduler.machines);

            for (String machine : Scheduler.machines.keySet()) {
                Scheduler.machines.put(machine, 0);
            }

            Scheduler.FileMachine = new HashMap<>();
        }

        if (isMinMinSelected.isSelected()) {
            if (useOld && minMachines != null) {
                // System.out.println("minmin "+ minMachines);
                for (String machine : minMachines.keySet()) {
                    Scheduler.machines.put(machine, minMachines.get(machine));
                }
                //Scheduler.machines = minMachines;
                //System.out.println("Scheu "+ Scheduler.);
            }

            new Xmin().xMin("min");
            rsl.drawMinMin(nombreDeTaches, Scheduler.FileMachine, Scheduler.machines);
            check = true;

        }

        // System.out.println(" Xmin " + Scheduler.machines);
        // System.out.println(" Xmin " + Scheduler.FileMachine);
        if (isSLBSelected.isSelected()) {

            for (String machine : Scheduler.machines.keySet()) {
                Scheduler.machines.put(machine, 0);
            }

            if (useOld && slbMachines != null) {
                for (String machine : slbMachines.keySet()) {
                    Scheduler.machines.put(machine, slbMachines.get(machine));
                }
                 
                 for (String machine : Scheduler.machines.keySet()) {
                    slbMachines.put(machine, Scheduler.machines.get(machine));
                    //System.out.println("ddddd" + machines);
                }
                
                
                 slbObj.machines = slbMachines;

                 Scheduler.machines = slbMachines;
                 
                 
                //System.out.println("slbbbbbbbbbbb "+ Scheduler.machines);
               // System.out.println(slbObj.machines);
               // System.out.println(Scheduler.machines);
                
                Scheduler.FileMachine = new HashMap<>();
                new Xmin().xMin("min");
               // slbObj.slbMachines = Scheduler.machines;
                System.out.println("");
               /* slbObj.FileMachine = new HashMap<>();
                for (String machine : Scheduler.FileMachine.keySet()) {
                    slbObj.FileMachine.put(machine, Scheduler.FileMachine.get(machine));
                }*/
               // System.out.println(Scheduler.machines);
            } else {

                new Xmin().xMin("min");
                slbObj = new Slb();
            }
            // System.out.println("slb    =>" + Scheduler.machines);
            // System.out.println("lalalal");
//            for(String tache : Scheduler.schuduler.get("M1").keySet()){
//                for(String machine :  slbObj.FileMachine.keySet()){
//                    slbObj.FileMachine.get(machine).
//                }
//            }
            slbObj.slb();
            //System.out.println(slbObj.machines);
            // System.out.println();
            rsl.drawSlb(nombreDeTaches, slbObj.FileMachine, slbObj.machines);
            check = true;
        }
        if (!check) {

            JOptionPane.showMessageDialog(null, "Selectionner au moin un algorithme");

        }

        useOld = false;
    }//GEN-LAST:event_jButton1ActionPerformed
    File file;

    public void deleteTableData() {
        while (jTableData.getRowCount() != 0) {
            jTableModel.removeRow(0);
        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // FileChooser filechooser = new FileChooser();

        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            jPath.setText(file.getAbsolutePath());
        }

        String[] data;
        try {

            Scanner reader = new Scanner(file);
            deleteTableData();
            String d = null;
            if (reader.hasNext()) {
                d = reader.nextLine();
                data = d.split(" ");
                //  System.out.println(data.length);
                //  System.out.println(columnModel.getColumnCount());

                if (data.length < columnModel.getColumnCount()) {

                    while (data.length < columnModel.getColumnCount()) {
                        tcolumn = columnModel.getColumn(data.length);

                        jTableData.removeColumn(tcolumn);
                        jTableModel.setColumnCount(data.length);

                        jTableData.validate();
                        jTableModel.fireTableStructureChanged();
                        columnModel = jTableData.getColumnModel();
                    }

                } else {

                    if (data.length > columnModel.getColumnCount()) {
                        for (int i = columnModel.getColumnCount(); i <= data.length; i++) {

                            jTableModel.addColumn("t" + i);

                            columnModel = jTableData.getColumnModel();

                            columnModel.getColumn(i).setCellRenderer(new ColumnColorRenderer(Color.lightGray, Color.black));
                            columnModel.getColumn(i).setHeaderValue("t" + i);
                            //jTableData.moveColumn(i-1, i);

                        }
                    }

                }
            }

            columnModel.getColumn(0).setCellRenderer(new ColumnColorRenderer(Color.DARK_GRAY, Color.GREEN));
            for (int i = 1; i < columnModel.getColumnCount(); i++) {
                tcolumn = columnModel.getColumn(i);
                tcolumn.setCellRenderer(new ColumnColorRenderer(Color.lightGray, Color.black));
            }

            jTableData.setColumnModel(columnModel);

            jTableData.repaint();
            //System.out.println(columnModel.getColumnCount());
            int i = 1;
            d = "M" + i + " " + d;
            //       System.out.println(d);
            data = d.split(" ");
            //     System.out.println("data length : " + data.length);
            jTableModel.addRow(data);
            while (reader.hasNext()) {

                d = "M" + ++i + " " + reader.nextLine();
                //       System.out.println(d);
                data = d.split(" ");
                //     System.out.println("data length : " + data.length);
                jTableModel.addRow(data);

            }
            //     System.out.println("hahahhahah =====>>>>>" + jTableModel.getColumnCount());

            reader.close();
        } catch (FileNotFoundException ex) {
          return;
        } catch (NullPointerException ex){
            return;
        }
        fileChooser.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPathActionPerformed

//    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//
//        choisir choix = new choisir();
//        choix.setVisible(true);
//        dispose();
//    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        deleteTableData();
        String d = null;

        //String[] data = d.split(" ");
        //  System.out.println(data.length);
        //  System.out.println(columnModel.getColumnCount());
        int nombreDeTaches = Integer.parseInt(jNombreDeTaches.getValue().toString()) + 1;

        if (nombreDeTaches < columnModel.getColumnCount()) {

            while (nombreDeTaches < columnModel.getColumnCount()) {
                tcolumn = columnModel.getColumn(nombreDeTaches);

                jTableData.removeColumn(tcolumn);
                jTableModel.setColumnCount(nombreDeTaches);

                jTableData.validate();
                jTableModel.fireTableStructureChanged();
                columnModel = jTableData.getColumnModel();
            }

        }

        if (nombreDeTaches > columnModel.getColumnCount()) {
            for (int i = columnModel.getColumnCount(); i < nombreDeTaches; i++) {

                jTableModel.addColumn("t" + i);

                columnModel = jTableData.getColumnModel();

                columnModel.getColumn(i).setCellRenderer(new ColumnColorRenderer(Color.lightGray, Color.black));
                columnModel.getColumn(i).setHeaderValue("t" + i);
                //jTableData.moveColumn(i-1, i);

            }
        }

        columnModel.getColumn(0).setCellRenderer(new ColumnColorRenderer(Color.DARK_GRAY, Color.GREEN));
        for (int i = 1; i < columnModel.getColumnCount(); i++) {
            tcolumn = columnModel.getColumn(i);
            tcolumn.setCellRenderer(new ColumnColorRenderer(Color.lightGray, Color.black));
        }

        jTableData.setColumnModel(columnModel);

        jTableData.repaint();
        //System.out.println(columnModel.getColumnCount());
        //       System.out.println(d);
        String[] data = new String[Integer.parseInt(jNombreDeTaches.getValue().toString()) + 1];
        int nombreDeMachine = Integer.parseInt(jNombreDeMachine.getValue().toString());
        //     System.out.println("data length : " + data.length);
        for (int i = 1; i <= nombreDeMachine; i++) {
            data[0] = "M" + i;
            jTableModel.addRow(data);
        }
        //     System.out.println("data length : " + data.length);

        //     System.out.println("hahahhahah =====>>>>>" + jTableModel.getColumnCount());

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox isMaxMinSelected;
    private javax.swing.JCheckBox isMinMinSelected;
    private javax.swing.JCheckBox isSLBSelected;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner jNombreDeMachine;
    private javax.swing.JSpinner jNombreDeTaches;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField jPath;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableData;
    // End of variables declaration//GEN-END:variables
}
